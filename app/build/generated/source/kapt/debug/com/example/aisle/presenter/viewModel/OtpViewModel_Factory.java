// Generated by Dagger (https://dagger.dev).
package com.example.aisle.presenter.viewModel;

import android.content.Context;
import com.example.aisle.domain.useCase.PostOtpUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OtpViewModel_Factory implements Factory<OtpViewModel> {
  private final Provider<Context> contextProvider;

  private final Provider<PostOtpUseCase> otpUseCaseProvider;

  public OtpViewModel_Factory(Provider<Context> contextProvider,
      Provider<PostOtpUseCase> otpUseCaseProvider) {
    this.contextProvider = contextProvider;
    this.otpUseCaseProvider = otpUseCaseProvider;
  }

  @Override
  public OtpViewModel get() {
    return newInstance(contextProvider.get(), otpUseCaseProvider.get());
  }

  public static OtpViewModel_Factory create(Provider<Context> contextProvider,
      Provider<PostOtpUseCase> otpUseCaseProvider) {
    return new OtpViewModel_Factory(contextProvider, otpUseCaseProvider);
  }

  public static OtpViewModel newInstance(Context context, PostOtpUseCase otpUseCase) {
    return new OtpViewModel(context, otpUseCase);
  }
}
