// Generated by Dagger (https://dagger.dev).
package com.example.aisle.presenter.di;

import com.example.aisle.data.repository.dataSource.OtpRemoteDataSource;
import com.example.aisle.domain.repository.OtpRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideOtpRepositoryFactory implements Factory<OtpRepository> {
  private final RepositoryModule module;

  private final Provider<OtpRemoteDataSource> otpRemoteDataSourceProvider;

  public RepositoryModule_ProvideOtpRepositoryFactory(RepositoryModule module,
      Provider<OtpRemoteDataSource> otpRemoteDataSourceProvider) {
    this.module = module;
    this.otpRemoteDataSourceProvider = otpRemoteDataSourceProvider;
  }

  @Override
  public OtpRepository get() {
    return provideOtpRepository(module, otpRemoteDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideOtpRepositoryFactory create(RepositoryModule module,
      Provider<OtpRemoteDataSource> otpRemoteDataSourceProvider) {
    return new RepositoryModule_ProvideOtpRepositoryFactory(module, otpRemoteDataSourceProvider);
  }

  public static OtpRepository provideOtpRepository(RepositoryModule instance,
      OtpRemoteDataSource otpRemoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideOtpRepository(otpRemoteDataSource));
  }
}
