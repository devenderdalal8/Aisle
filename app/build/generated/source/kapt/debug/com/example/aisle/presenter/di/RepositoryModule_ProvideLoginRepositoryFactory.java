// Generated by Dagger (https://dagger.dev).
package com.example.aisle.presenter.di;

import com.example.aisle.data.repository.dataSource.LoginRemoteDataSource;
import com.example.aisle.domain.repository.LoginRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideLoginRepositoryFactory implements Factory<LoginRepository> {
  private final RepositoryModule module;

  private final Provider<LoginRemoteDataSource> loginRemoteDataSourceProvider;

  public RepositoryModule_ProvideLoginRepositoryFactory(RepositoryModule module,
      Provider<LoginRemoteDataSource> loginRemoteDataSourceProvider) {
    this.module = module;
    this.loginRemoteDataSourceProvider = loginRemoteDataSourceProvider;
  }

  @Override
  public LoginRepository get() {
    return provideLoginRepository(module, loginRemoteDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideLoginRepositoryFactory create(RepositoryModule module,
      Provider<LoginRemoteDataSource> loginRemoteDataSourceProvider) {
    return new RepositoryModule_ProvideLoginRepositoryFactory(module, loginRemoteDataSourceProvider);
  }

  public static LoginRepository provideLoginRepository(RepositoryModule instance,
      LoginRemoteDataSource loginRemoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideLoginRepository(loginRemoteDataSource));
  }
}
