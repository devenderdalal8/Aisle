// Generated by Dagger (https://dagger.dev).
package com.example.aisle.presenter.di;

import com.example.aisle.data.repository.dataSource.NotesRemoteDataSource;
import com.example.aisle.domain.repository.NotesRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideNotesRepositoryFactory implements Factory<NotesRepository> {
  private final RepositoryModule module;

  private final Provider<NotesRemoteDataSource> notesRemoteDataSourceProvider;

  public RepositoryModule_ProvideNotesRepositoryFactory(RepositoryModule module,
      Provider<NotesRemoteDataSource> notesRemoteDataSourceProvider) {
    this.module = module;
    this.notesRemoteDataSourceProvider = notesRemoteDataSourceProvider;
  }

  @Override
  public NotesRepository get() {
    return provideNotesRepository(module, notesRemoteDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideNotesRepositoryFactory create(RepositoryModule module,
      Provider<NotesRemoteDataSource> notesRemoteDataSourceProvider) {
    return new RepositoryModule_ProvideNotesRepositoryFactory(module, notesRemoteDataSourceProvider);
  }

  public static NotesRepository provideNotesRepository(RepositoryModule instance,
      NotesRemoteDataSource notesRemoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideNotesRepository(notesRemoteDataSource));
  }
}
