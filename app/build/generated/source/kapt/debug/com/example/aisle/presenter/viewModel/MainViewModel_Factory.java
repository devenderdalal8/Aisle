// Generated by Dagger (https://dagger.dev).
package com.example.aisle.presenter.viewModel;

import android.content.Context;
import com.example.aisle.domain.useCase.GetNotesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<Context> contextProvider;

  private final Provider<GetNotesUseCase> notesUseCaseProvider;

  public MainViewModel_Factory(Provider<Context> contextProvider,
      Provider<GetNotesUseCase> notesUseCaseProvider) {
    this.contextProvider = contextProvider;
    this.notesUseCaseProvider = notesUseCaseProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(contextProvider.get(), notesUseCaseProvider.get());
  }

  public static MainViewModel_Factory create(Provider<Context> contextProvider,
      Provider<GetNotesUseCase> notesUseCaseProvider) {
    return new MainViewModel_Factory(contextProvider, notesUseCaseProvider);
  }

  public static MainViewModel newInstance(Context context, GetNotesUseCase notesUseCase) {
    return new MainViewModel(context, notesUseCase);
  }
}
