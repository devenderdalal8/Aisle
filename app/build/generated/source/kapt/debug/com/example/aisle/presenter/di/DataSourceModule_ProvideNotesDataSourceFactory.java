// Generated by Dagger (https://dagger.dev).
package com.example.aisle.presenter.di;

import com.example.aisle.data.ApiService.ApiService;
import com.example.aisle.data.repository.dataSource.NotesRemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataSourceModule_ProvideNotesDataSourceFactory implements Factory<NotesRemoteDataSource> {
  private final DataSourceModule module;

  private final Provider<ApiService> apiServiceProvider;

  public DataSourceModule_ProvideNotesDataSourceFactory(DataSourceModule module,
      Provider<ApiService> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public NotesRemoteDataSource get() {
    return provideNotesDataSource(module, apiServiceProvider.get());
  }

  public static DataSourceModule_ProvideNotesDataSourceFactory create(DataSourceModule module,
      Provider<ApiService> apiServiceProvider) {
    return new DataSourceModule_ProvideNotesDataSourceFactory(module, apiServiceProvider);
  }

  public static NotesRemoteDataSource provideNotesDataSource(DataSourceModule instance,
      ApiService apiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideNotesDataSource(apiService));
  }
}
